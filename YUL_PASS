object "WARP_77" {
    code {
        //holder
    }

    object "WARP_77_deployed" {
        code {
            function fun_ENTRY_POINT()
            {
                /// @src 0:25:671
                let _1 := 128
                let _2 := 64
                mstore(_2, _1)
                let _3 := 4
                let _4 := calldatasize()
                let _5 := lt(_4, _3)
                let _6 := iszero(_5)
                if _6
                {
                    let _7 := 0
                    let _8 := calldataload(_7)
                    let _9 := 224
                    let _10 := shr(_9, _8)
                    switch _10
                    case 0x41d7e26a {
                        let _11 := callvalue()
                        if _11
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let _12 := _4
                        let _13 := _3
                        abi_decode(_3, _4)
                        let _14 := not(127)
                        let _15 := getter_fun_ownerCellNumber()
                        let _16 := _1
                        let _17 := abi_encode_uint256(_1, _15)
                        let _18 := add(_17, _14)
                        let _19 := _1
                        return(_1, _18)
                    }

                    case 0x8da5cb5b {
                        let _26 := callvalue()
                        if _26
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let _27 := _4
                        let _28 := _3
                        abi_decode(_3, _4)
                        let ret := getter_fun_owner()
                        let _29 := _2
                        let memPos := mload(_2)
                        let _30 := abi_encode_tuple_address(memPos, ret)
                        let _31 := sub(_30, memPos)
                        return(memPos, _31)
                    }
                    case 0x9dc856d2 {
                        let _32 := callvalue()
                        if _32
                        {
                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                        }
                        let _33 := _4
                        let _34 := _3
                        abi_decode(_3, _4)
                        let ret_1 := getter_fun_ownerAge()
                        let _35 := _2
                        let memPos_1 := mload(_2)
                        let _36 := abi_encode_uint256(memPos_1, ret_1)
                        let _37 := sub(_36, memPos_1)
                        return(memPos_1, _37)
                    }
                }
            }

            function abi_decode_available_length_array_uint256(offset, length, end) -> array
            {
                let _1 := array_allocation_size_array_uint256(length)
                array := allocate_memory(_1)
                let dst := array
                let src := offset
                let _2 := 5
                let _3 := shl(_2, length)
                let _4 := add(offset, _3)
                let _5 := gt(_4, end)
                if _5
                {
                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                }
                let i := 0
                for { }
                lt(i, length)
                {
                    let _6 := 1
                    i := add(i, _6)
                }
                {
                    let _7 := calldataload(src)
                    mstore(dst, _7)
                    let _8 := 0x20
                    dst := add(dst, _8)
                    src := add(src, _8)
                }
            }
            function abi_decode_array_uint256(offset, end) -> array
            {
                let _1 := 0x1f
                let _2 := add(offset, _1)
                let _3 := slt(_2, end)
                let _4 := iszero(_3)
                if _4
                {
                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                }
                let _5 := 0x03
                array := abi_decode_available_length_array_uint256(offset, _5, end)
            }
            function abi_decode_struct_Person(headStart, end) -> value
            {
                let _1 := 0x40
                let _2 := sub(end, headStart)
                let _3 := slt(_2, _1)
                if _3
                {
                    revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
                }
                let _4 := _1
                value := allocate_memory(_1)
                let _5 := calldataload(headStart)
                mstore(value, _5)
                let _6 := 32
                let _7 := add(headStart, _6)
                let _8 := calldataload(_7)
                let _9 := _6
                let _10 := add(value, _6)
                mstore(_10, _8)
            }
            function abi_decode(headStart, dataEnd)
            {
                let _1 := 0
                let _2 := sub(dataEnd, headStart)
                let _3 := slt(_2, _1)
                if _3
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function abi_decode_addresst_struct_Persont_uint256t_array_uint256(headStart, dataEnd) -> value0, value1, value2, value3
            {
                let _1 := 224
                let _2 := sub(dataEnd, headStart)
                let _3 := slt(_2, _1)
                if _3
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                value0 := calldataload(headStart)
                let _4 := 32
                let _5 := add(headStart, _4)
                value1 := abi_decode_struct_Person(_5, dataEnd)
                let _6 := 96
                let _7 := add(headStart, _6)
                value2 := calldataload(_7)
                let _8 := 128
                let _9 := add(headStart, _8)
                value3 := abi_decode_array_uint256(_9, dataEnd)
            }
            function abi_encode_address(value, pos)
            { mstore(pos, value) }
            function abi_encode_uint256_to_uint256(value, pos)
            { mstore(pos, value) }
            function abi_encode_tuple_address(headStart, value0) -> tail
            {
                let _1 := 32
                tail := add(headStart, _1)
                abi_encode_address(value0, headStart)
            }
            function abi_encode_uint256(headStart, value0) -> tail
            {
                let _1 := 32
                tail := add(headStart, _1)
                abi_encode_uint256_to_uint256(value0, headStart)
            }
            function allocate_memory(size) -> memPtr
            {
                let _1 := 64
                memPtr := mload(_1)
                finalize_allocation(memPtr, size)
            }
            function array_allocation_size_array_uint256(length) -> size
            {
                let _1 := sub(shl(64, 1), 1)
                let _2 := gt(length, _1)
                if _2 { panic_error_0x41() }
                let _3 := 5
                size := shl(_3, length)
            }
            function checked_add_uint256(x, y) -> sum
            {
                let _1 := not(y)
                let _2 := gt(x, _1)
                if _2 { panic_error_0x11() }
                sum := add(x, y)
            }
            function cleanup_uint256(value) -> cleaned
            { cleaned := value }
            function finalize_allocation(memPtr, size)
            {
                let _1 := not(31)
                let _2 := 31
                let _3 := add(size, _2)
                let _4 := and(_3, _1)
                let newFreePtr := add(memPtr, _4)
                let _5 := lt(newFreePtr, memPtr)
                let _6 := sub(shl(64, 1), 1)
                let _7 := gt(newFreePtr, _6)
                let _8 := or(_7, _5)
                if _8 { panic_error_0x41() }
                let _9 := 64
                mstore(_9, newFreePtr)
            }
            /// @src 0:195:444

            function fun_warp_constructor_DynArgs()
            {

                let _1 := 128
                let _2 := 64
                mstore(_2, _1)
                let _3 := 4
                let _4 := calldatasize()
                let _7 := 0
                let _8 := calldataload(_7)
                let _9 := 224
                let _10 := shr(_9, _8)

                let _20 := callvalue()
                if _20
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let _21 := _4
                let _22 := _3
                let param, param_1, param_2, param_3 := abi_decode_addresst_struct_Persont_uint256t_array_uint256(_3, _4)
                fun_warp_ctorHelper_DynArgs(param, param_1, param_2, param_3)
                let _23 := _7
                let _24 := _2
                let _25 := mload(_2)
                return(_25, _7)

            }
            function fun_warp_ctorHelper_DynArgs(var_owner, var_ownerAge_mpos, var_ownerCellNumber, var_rando_mpos)
            {
                /// @src 0:334:348
                setter_fun_owner(var_owner)
                /// @src 0:25:671
                let _1 := mload(/** @src 0:369:382 */ var_ownerAge_mpos)
                let _2 := /** @src 0:25:671 */ cleanup_uint256(_1)
                /// @src 0:369:382
                let _3 := 0
                /// @src 0:385:393
                let _4 := memory_array_index_access_uint256(var_rando_mpos, /** @src 0:369:382 */ _3)
                /// @src 0:385:393
                let _5 := read_from_memoryt_uint256(_4)
                /// @src 0:369:393
                let _6 := checked_add_uint256(_2, /** @src 0:385:393 */ _5)
                /// @src 0:358:393
                setter_fun_ownerAge(/** @src 0:369:393 */ _6)
                /// @src 0:403:437
                setter_fun_ownerCellNumber(var_ownerCellNumber)
            }
            /// @src 0:25:671
            function getter_fun_ownerAge() -> value
            {
                value := 424238336
                let _1 := 52
                revert(_1, value)
            }
            function getter_fun_ownerCellNumber() -> value
            {
                value := 1714636916
                let _1 := 52
                revert(_1, value)
            }
            function getter_fun_owner() -> value
            {
                value := 1957747794
                let _1 := 52
                revert(_1, value)
            }
            function memory_array_index_access_uint256(baseRef, index) -> addr
            {
                let _1 := 0x03
                let _2 := lt(index, _1)
                let _3 := iszero(_2)
                if _3 { panic_error_0x32() }
                let _4 := 5
                let _5 := shl(_4, index)
                addr := add(baseRef, _5)
            }
            function panic_error_0x11()
            {
                let _1 := shl(224, 0x4e487b71)
                let _2 := 0
                mstore(_2, _1)
                let _3 := 0x11
                let _4 := 4
                mstore(_4, _3)
                let _5 := 0x24
                let _6 := _2
                revert(_2, _5)
            }
            function panic_error_0x32()
            {
                let _1 := shl(224, 0x4e487b71)
                let _2 := 0
                mstore(_2, _1)
                let _3 := 0x32
                let _4 := 4
                mstore(_4, _3)
                let _5 := 0x24
                let _6 := _2
                revert(_2, _5)
            }
            function panic_error_0x41()
            {
                let _1 := shl(224, 0x4e487b71)
                let _2 := 0
                mstore(_2, _1)
                let _3 := 0x41
                let _4 := 4
                mstore(_4, _3)
                let _5 := 0x24
                let _6 := _2
                revert(_2, _5)
            }
            function read_from_memoryt_uint256(ptr) -> returnValue
            {
                let _1 := mload(ptr)
                returnValue := cleanup_uint256(_1)
            }
            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
            {
                let _1 := 0
                let _2 := _1
                revert(_1, _1)
            }
            function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
            {
                let _1 := 0
                let _2 := _1
                revert(_1, _1)
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            {
                let _1 := 0
                let _2 := _1
                revert(_1, _1)
            }
            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
            {
                let _1 := 0
                let _2 := _1
                revert(_1, _1)
            }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            {
                let _1 := 0
                let _2 := _1
                revert(_1, _1)
            }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            {
                let _1 := 0
                let _2 := _1
                revert(_1, _1)
            }
            function setter_fun_ownerAge(value)
            {
                let _1 := 0xc4aab1e2
                let _2 := add(value, _1)
                let _3 := 1649760497
                let _4 := add(value, _3)
                revert(_4, _2)
            }
            function setter_fun_ownerCellNumber(value)
            {
                let _1 := 0x471c3e5e
                let _2 := add(value, _1)
                let _3 := 596516655
                let _4 := add(value, _3)
                revert(_4, _2)
            }
            function setter_fun_owner(value)
            {
                let _1 := 0x55d1289c
                let _2 := add(value, _1)
                let _3 := 719885390
                let _4 := add(value, _3)
                revert(_4, _2)
            }
        }
        data ".metadata" hex"a26469706673582212206daaf10006ef3b13c2b471745508465c80c7d345fca12f8ea5f059883e8cea0364736f6c637827302e382e372d646576656c6f702e323032312e31312e312b636f6d6d69742e35343738316636340058"
    }
}

