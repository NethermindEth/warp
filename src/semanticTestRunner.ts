import { execSync } from 'child_process';
import { existsSync, readFileSync, writeFileSync } from 'fs-extra';

let version: string = '0.8.14';
const filter = process.env.FILTER;

if (filter) {
  console.log(`Using filter: ${filter}`);
}

if (process.env.VERSION) {
  version = process.env.VERSION;
} else {
  console.warn('No version provided, using default: ' + version);
}

if (!existsSync('./tests/behaviour/solidity')) {
  if (!existsSync('./tests/behaviour/setup.sh')) {
    new Error('setup.sh not found');
  }
  execSync(`VERSION=${version}./tests/behaviour/setup.sh`);
}

// Comparisions of tests between white_list and current version

if (process.argv.includes('--compare')) {
  const whitelistPath = './tests/behaviour/expectations/semantic_whitelist.ts';
  const whitelistData = readFileSync(whitelistPath, 'utf-8');
  const testFiles = execSync(
    'find ./tests/behaviour/solidity/test/libsolidity/semanticTests -type f -name "*.sol"',
  )
    .toString()
    .trim()
    .split('\n')
    .sort()
    .filter((file) => {
      if (filter) {
        return file.includes(filter);
      }
      return true;
    });
}

// Test Execution Loop

const testDirs = execSync(
  'find ./tests/behaviour/solidity/test/libsolidity/semanticTests -mindepth 1 -type d',
)
  .toString()
  .trim()
  .split('\n')
  .sort();

const filterDirs: string[] = [
  ...testDirs,
  'tests/behaviour/solidity/test/libsolidity/semanticTests',
];

const currentTestsFIleBody = readFileSync(
  './tests/behaviour/expectations/semantic_tests_generated.ts',
  'utf-8',
);

filterDirs.forEach((dir) => {
  const testFiles = execSync(`find ${dir} -mindepth 1 -maxdepth 1 -name '*.sol'`)
    .toString()
    .trim()
    .split('\n')
    .sort()
    .filter((file) => {
      if (filter) {
        return file.includes(filter);
      }
      return true;
    });
  if (testFiles.length > 0) {
    console.log(`Running tests from ${dir.split('/').pop()}`);
    const testsFileBody = [
      '// Generated by semanticTestRunner.ts',
      'const tests:string[] = [',
      ...testFiles.map((file) => {
        // remove the ./ from the start of the path
        return `    "${file.slice(2)}",`;
      }),
      '];',
      'export default tests;',
    ];
    writeFileSync(
      './tests/behaviour/expectations/semantic_tests_generated.ts',
      testsFileBody.join('\n'),
    );
    try {
      execSync(
        `FILTER=${dir.slice(
          2,
        )} npx mocha tests/behaviour/behaviour.test.ts --extension ts --require ts-node/register --exit`,
        { stdio: 'inherit' },
      );
    } catch (e) {
      console.log(e);
    }
    writeFileSync(
      './tests/behaviour/expectations/semantic_tests_generated.ts',
      currentTestsFIleBody,
    );
  }
});
