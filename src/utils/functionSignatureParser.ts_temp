
// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.2.2 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { Signature: peg$parseSignature };
  let peg$startRuleFunction: () => any = peg$parseSignature;

  const peg$c0 = "()";
  const peg$c1 = peg$literalExpectation("()", false);
  const peg$c2 = function(name: any): any {
      const loc = location()
      return (input: Input) => {
        if (!(input instanceof Array)) {
          error(`Expected input to be array: ${input}`, loc);
          throw "error already raised";
        }
        if (input.length > 0) {
          error(`${name} expects no arguments`);
          throw "error already raised";
        }
        return [];
      }
    };
  const peg$c3 = "(";
  const peg$c4 = peg$literalExpectation("(", false);
  const peg$c5 = ")";
  const peg$c6 = peg$literalExpectation(")", false);
  const peg$c7 = function(args: any): any {
        const loc = location();
        return (input: Input) => {
          if (!(input instanceof Array)) {
            error(`Expected input to be array: ${input}`, loc);
            throw "error already raised";
          }
          return args(input);
        }
      };
  const peg$c8 = ",";
  const peg$c9 = peg$literalExpectation(",", false);
  const peg$c10 = function(head: any, tail: any): any {
      const loc = location();
      return (input : Input) => {
        if (!(input instanceof Array)) {
          error(`b Expected input to be array: ${input}`, loc);
          throw "error already raised, appeasing the typesystem";
        }
        if (input.length !== tail.length + 1) error(`Expected ${tail.length + 1} arguments not ${input.length}`);
        return [...head(input[0]), ...tail.flatMap(([_, __, ___, pf]: [any, any, any, parseF], i: number) => pf(input[i + 1]))];
      }
    };
  const peg$c11 = function(args: any): any { return args };
  const peg$c12 = function(t: any, array: any): any {
      return (input: Input) => array.reduce((result: parseF, af: (f: parseF) => parseF) => af(result), t)(input);
    };
  const peg$c13 = function(t: any): any { return t };
  const peg$c14 = "[]";
  const peg$c15 = peg$literalExpectation("[]", false);
  const peg$c16 = function(): any {
        const loc = location()
        return (f : parseF)  => (input: Input) => {
          if (!(input instanceof Array)) {
            error(`c Expected input to be array: ${input}`, loc);
            throw "error already raised, appeasing the typesystem";
          }
          return [BigInt(input.length), ...input.flatMap(f)];
        };
    };
  const peg$c17 = "[";
  const peg$c18 = peg$literalExpectation("[", false);
  const peg$c19 = "]";
  const peg$c20 = peg$literalExpectation("]", false);
  const peg$c21 = function(i: any): any {
      const loc = location()
      return (f: parseF) => (input : Input) => {
        if (!(input instanceof Array)) {
          error(`d Expected input to be array: ${input}`, loc);
          throw "error already raised, appeasing the typesystem";
        }
        if (input.length !== i) error(`Expected input to have ${i} elements`);
        return input.flatMap(f);
      }
    };
  const peg$c22 = "uint";
  const peg$c23 = peg$literalExpectation("uint", false);
  const peg$c24 = function(width: any): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        let i: bigint;
        try {
          i = BigInt(input);
        } catch {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (i >= 2n ** BigInt(width)) error(`Uint${width} exceeds bound: ${input}`);
        if (i < 0n) error(`Uint${width} is less than zero: ${input}`);
        return toUintOrFelt(i, 256);
      }
    };
  const peg$c25 = "int";
  const peg$c26 = peg$literalExpectation("int", false);
  const peg$c27 = function(width: any): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        let i: bigint;
        try {
          i = BigInt(input);
        } catch {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (i >= 2n ** BigInt(width - 1n)) error(`Int${width} exceeds bound: ${input}`);
        if (i < -(2n ** BigInt(width - 1n))) error(`Int${width} exceeds bound: ${input}`);
        return toUintOrFelt(i, 256);
      }
    };
  const peg$c28 = function(): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        let i: bigint;
        try {
          i = BigInt(input);
        } catch {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (i >= 2n ** BigInt(256n)) error(`Uint256 exceeds bound: ${input}`);
        if (i < 0n) error(`Uint256 is less than zero: ${input}`);
        return toUintOrFelt(i, 256);
      }
    };
  const peg$c29 = function(): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        let i: bigint;
        try {
          i = BigInt(input);
        } catch {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (i >= 2n ** BigInt(255n)) error(`Int256 exceeds bound: ${input}`);
        if (i < -(2n ** BigInt(255n))) error(`Int256 exceeds bound: ${input}`);
        return toUintOrFelt(i, 256);
      }
    };
  const peg$c30 = "address";
  const peg$c31 = peg$literalExpectation("address", false);
  const peg$c32 = function(): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        let i: bigint;
        try {
          i = BigInt(input);
        } catch {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (i >= 2n ** BigInt(160)) error(`Address exceeds bound: ${input}`);
        if (i < 0n) error(`Address is less than zero: ${input}`);
        return toUintOrFelt(i, 160);
      }
    };
  const peg$c33 = "bool";
  const peg$c34 = peg$literalExpectation("bool", false);
  const peg$c35 = function(): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected bool to be number, true or false: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (input === "true") return [1n];
        if (input === "false") return [0n];
        let b: bigint;
        try {
          b = BigInt(input)
        } catch {
          error(`Expected input to be a boolean: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (b === 1n) return [1n];
        if (b === 0n) return [0n];
        error(`${input} can't be parsed as a boolean`);
      }
    };
  const peg$c36 = "bytes";
  const peg$c37 = peg$literalExpectation("bytes", false);
  const peg$c38 = function(len: any): any { return (input: Input) => {
        if (input instanceof Array) {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        let i: bigint;
        try {
          i = BigInt(input);
        } catch {
          error(`Expected input to be number: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        if (i >= 2n ** BigInt(len * 8)) error(`Bytes${len} exceeds bound: ${input}`);
        if (i < 0n) error(`Byte${len} is less than zero: ${input}`);
        return toUintOrFelt(i, len*8);
      };
    };
  const peg$c39 = function(): any { return (input: Input) => {
        if (!(input instanceof Array)) {
          error(`d Expected input to be array: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        return [BigInt(input.length), ...input.flatMap((val) => {
          if (val instanceof Array) {
            error(`Expected input to be number: ${input}`);
            throw "error already raised, appeasing the typesystem";
          }
          let i: bigint;
          try {
            i = BigInt(val);
          } catch {
            error(`Expected input to be number: ${input}`);
            throw "error already raised, appeasing the typesystem";
          }
          if (i >= 2n ** 8n) error(`Byte exceeded bound: ${input}`);
          if (i < 0n) error(`Byte is less than zero: ${input}`);
          return toUintOrFelt(i, 8);
        })];
      };
    };
  const peg$c40 = "string";
  const peg$c41 = peg$literalExpectation("string", false);
  const peg$c42 = function(): any { return (input: Input) => {
        if (!(typeof input === "string")) {
          error(`Expected input to be string: ${input}`);
          throw "error already raised, appeasing the typesystem";
        }
        const utf8string = unescape(encodeURIComponent(input));
        const res = [BigInt(utf8string.length)];
        for (var i = 0; i < utf8string.length; i ++) {
          res.push(BigInt(utf8string.charCodeAt(i)));
        }
        return res;
      }
    };
  const peg$c43 = peg$otherExpectation("biginteger");
  const peg$c44 = /^[0-9]/;
  const peg$c45 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c46 = "0x";
  const peg$c47 = peg$literalExpectation("0x", false);
  const peg$c48 = /^[0-9a-fA-F]/;
  const peg$c49 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  const peg$c50 = function(): any { return BigInt(text()) };
  const peg$c51 = peg$otherExpectation("integer");
  const peg$c52 = function(): any { return parseInt(text(), 10) };
  const peg$c53 = /^[a-zA-Z_0-9]/;
  const peg$c54 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false);
  const peg$c55 = peg$otherExpectation("whitespace");
  const peg$c56 = /^[ \t\n\r]/;
  const peg$c57 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseSignature(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseFuncName();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s2 = peg$c0;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFuncName();
      if (s1 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c3;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseArguments();
          if (s3 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c5;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s4 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseArguments(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseType();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseType();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseType();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseType(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseArguments();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c5;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseStaticType();
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseArraySuffix();
        if (s3 as any !== peg$FAILED) {
          while (s3 as any !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseArraySuffix();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseStaticType();
        if (s1 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseArraySuffix(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c16();
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseInteger();
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseStaticType(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBigInteger();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseBigInteger();
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c22) {
          s1 = peg$c22;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s1 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28();
        }
        s0 = s1;
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c25) {
            s1 = peg$c25;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s1 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c29();
          }
          s0 = s1;
          if (s0 as any === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c30) {
              s1 = peg$c30;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s1 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32();
            }
            s0 = s1;
            if (s0 as any === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c33) {
                s1 = peg$c33;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s1 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35();
              }
              s0 = s1;
              if (s0 as any === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c36) {
                  s1 = peg$c36;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s1 as any !== peg$FAILED) {
                  s2 = peg$parseInteger();
                  if (s2 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c38(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 as any === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c36) {
                    s1 = peg$c36;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                  }
                  if (s1 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c39();
                  }
                  s0 = s1;
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c40) {
                      s1 = peg$c40;
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                    if (s1 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c42();
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBigInteger(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c44.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c46) {
        s2 = peg$c46;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            if (peg$c48.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c50();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }

    return s0;
  }

  function peg$parseInteger(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c44.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c46) {
        s2 = peg$c46;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            if (peg$c48.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c52();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    return s0;
  }

  function peg$parseFuncName(): any {
    let s0, s1;

    s0 = [];
    if (peg$c53.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c53.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
    }

    return s0;
  }

  function peg$parse_(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c56.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c56.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }

    return s0;
  }


  type Input = string | number | Input[];
  type Output = BigInt[];
  type parseF = (i: Input) => Output;


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;
