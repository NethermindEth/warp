Metadata-Version: 2.1
Name: eth-hash
Version: 0.5.1
Summary: eth-hash: The Ethereum hashing function, keccak256, sometimes (erroneously) called sha3
Home-page: https://github.com/ethereum/eth-hash
Author: The Ethereum Foundation
Author-email: snakecharmers@ethereum.org
License: MIT
Keywords: ethereum
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.7, <4
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: dev
Requires-Dist: bumpversion (<1,>=0.5.3) ; extra == 'dev'
Requires-Dist: pytest-watch (<5,>=4.1.0) ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: twine ; extra == 'dev'
Requires-Dist: ipython ; extra == 'dev'
Requires-Dist: pytest (<7,>=6.2.5) ; extra == 'dev'
Requires-Dist: pytest-xdist (<3,>=2.4.0) ; extra == 'dev'
Requires-Dist: tox (<4,>=3.14.6) ; extra == 'dev'
Requires-Dist: flake8 (==3.7.9) ; extra == 'dev'
Requires-Dist: isort (<5,>=4.2.15) ; extra == 'dev'
Requires-Dist: mypy (==0.961) ; extra == 'dev'
Requires-Dist: pydocstyle (<6,>=5.0.0) ; extra == 'dev'
Requires-Dist: black (<23,>=22.0) ; extra == 'dev'
Requires-Dist: Sphinx (<6,>=5.0.0) ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme (<1,>=0.1.9) ; extra == 'dev'
Requires-Dist: towncrier (<22,>=21) ; extra == 'dev'
Requires-Dist: jinja2 (<3.1.0,>=3.0.0) ; extra == 'dev'
Provides-Extra: doc
Requires-Dist: Sphinx (<6,>=5.0.0) ; extra == 'doc'
Requires-Dist: sphinx-rtd-theme (<1,>=0.1.9) ; extra == 'doc'
Requires-Dist: towncrier (<22,>=21) ; extra == 'doc'
Requires-Dist: jinja2 (<3.1.0,>=3.0.0) ; extra == 'doc'
Provides-Extra: lint
Requires-Dist: flake8 (==3.7.9) ; extra == 'lint'
Requires-Dist: isort (<5,>=4.2.15) ; extra == 'lint'
Requires-Dist: mypy (==0.961) ; extra == 'lint'
Requires-Dist: pydocstyle (<6,>=5.0.0) ; extra == 'lint'
Requires-Dist: black (<23,>=22.0) ; extra == 'lint'
Provides-Extra: pycryptodome
Requires-Dist: pycryptodome (<4,>=3.6.6) ; extra == 'pycryptodome'
Provides-Extra: pysha3
Requires-Dist: pysha3 (<2.0.0,>=1.0.0) ; (python_version < "3.9") and extra == 'pysha3'
Requires-Dist: safe-pysha3 (>=1.0.0) ; (python_version >= "3.9") and extra == 'pysha3'
Provides-Extra: test
Requires-Dist: pytest (<7,>=6.2.5) ; extra == 'test'
Requires-Dist: pytest-xdist (<3,>=2.4.0) ; extra == 'test'
Requires-Dist: tox (<4,>=3.14.6) ; extra == 'test'

# eth-hash

[![Join the chat at https://gitter.im/ethereum/web3.py](https://badges.gitter.im/ethereum/web3.py.svg)](https://gitter.im/ethereum/web3.py?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
[![Build Status](https://circleci.com/gh/ethereum/eth-hash.svg?style=shield)](https://circleci.com/gh/ethereum/eth-hash)
[![PyPI version](https://badge.fury.io/py/eth-hash.svg)](https://badge.fury.io/py/eth-hash)
[![Python versions](https://img.shields.io/pypi/pyversions/eth-hash.svg)](https://pypi.python.org/pypi/eth-hash)
[![Docs build](https://readthedocs.org/projects/eth-hash/badge/?version=latest)](http://eth-hash.readthedocs.io/en/latest/?badge=latest)
   

The Ethereum hashing function, keccak256, sometimes (erroneously) called sha3

Note: the similarly named [pyethash](https://github.com/ethereum/ethash)
has a completely different use: it generates proofs of work.

This is a low-level library, intended to be used internally by other Ethereum tools.
If you're looking for a convenient hashing tool, check out
[`eth_utils.keccak()`](https://eth-utils.readthedocs.io/en/stable/utilities.html#keccak-bytes-int-bool-text-str-hexstr-str-bytes)
which will be a little friendlier, and provide access to other helpful utilities.

Read more in the [documentation on ReadTheDocs](https://eth-hash.readthedocs.io/). [View the change log](https://eth-hash.readthedocs.io/en/latest/release_notes.html).


## Quickstart

```sh
pip install eth-hash[pycryptodome]
```

```py
>>> from eth_hash.auto import keccak
>>> keccak(b'')
b"\xc5\xd2F\x01\x86\xf7#<\x92~}\xb2\xdc\xc7\x03\xc0\xe5\x00\xb6S\xca\x82';{\xfa\xd8\x04]\x85\xa4p"
```

See the [docs](http://eth-hash.readthedocs.io/en/latest/quickstart.html#quickstart)
for more about choosing and installing backends.

## Developer Setup

If you would like to hack on eth-hash, please check out the [Snake Charmers
Tactical Manual](https://github.com/ethereum/snake-charmers-tactical-manual)
for information on how we do:

- Testing
- Pull Requests
- Code Style
- Documentation

### Development Environment Setup

You can set up your dev environment with:

```sh
git clone git@github.com:ethereum/eth-hash.git
cd eth-hash
virtualenv -p python3 venv
. venv/bin/activate
pip install -e .[dev]
```

### Testing Setup

During development, you might like to have tests run on every file save.

Show flake8 errors on file change:

```sh
# Test flake8
when-changed -v -s -r -1 eth_hash/ tests/ -c "clear; flake8 eth_hash tests && echo 'flake8 success' || echo 'error'"
```

Run multi-process tests in one command, but without color:

```sh
# in the project root:
pytest --numprocesses=4 --looponfail --maxfail=1
# the same thing, succinctly:
pytest -n 4 -f --maxfail=1
```

Run in one thread, with color and desktop notifications:

```sh
cd venv
ptw --onfail "notify-send -t 5000 'Test failure ⚠⚠⚠⚠⚠' 'python 3 test on eth-hash failed'" ../tests ../eth_hash
```

### Release setup

For Debian-like systems:
```
apt install pandoc
```

To release a new version:

```sh
make release bump=$$VERSION_PART_TO_BUMP$$
```

#### How to bumpversion

The version format for this repo is `{major}.{minor}.{patch}` for stable, and
`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).

To issue the next version in line, specify which part to bump,
like `make release bump=minor` or `make release bump=devnum`. This is typically done from the
master branch, except when releasing a beta (in which case the beta is released from master,
and the previous stable branch is released from said branch).

If you are in a beta version, `make release bump=stage` will switch to a stable.

To issue an unstable version when the current version is stable, specify the
new version explicitly, like `make release bump="--new-version 4.0.0-alpha.1 devnum"`
